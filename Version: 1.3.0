/*
 * ESP32_TimerRelay_Controller
 * Version: 1.3.0 (MQTT + Web API)
 */

#include <WiFi.h>
#include <HTTPClient.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>

// WiFi credentials
const char* ssid = "101-IOT";
const char* password = "10101010";



// MQTT Configuration
const char* mqtt_server = "broker.hivemq.com";  
const int mqtt_port = 1883;
const char* mqtt_user = "";         
const char* mqtt_password = "";     
const char* device_id = "esp32_timer_relay_01"; 

// MQTT Topics
const char* topic_relay1_control = "home/relay1/control";
const char* topic_relay2_control = "home/relay2/control";
const char* topic_status = "home/relay/status";
const char* topic_command = "home/relay/command";

// Pin definitions
const int LED_PIN = 2;         // LED สำหรับแสดงสถานะทั้งหมด
const int SWITCH1_PIN = 22;    // สวิตช์ตัวที่ 1
const int SWITCH2_PIN = 23;    // สวิตช์ตัวที่ 2
const int RELAY1_PIN = 16;     // รีเลย์ตัวที่ 1
const int RELAY2_PIN = 19;     // รีเลย์ตัวที่ 2

// Timing configurations
const long EMERGENCY_BLINK = 100;   // กะพริบเร็วมาก (100ms) สำหรับ 30 วินาทีสุดท้าย
const long WARNING_BLINK = 500;     // กะพริบเร็ว (500ms) สำหรับ 3 นาทีสุดท้าย
const long WIFI_FAST_BLINK = 1000;  // กะพริบ 1 วินาที สำหรับไม่มี WiFi
const long WIFI_SLOW_BLINK = 3000;  // กะพริบช้า 3 วินาที สำหรับมี WiFi + Internet
const long CHECK_INTERVAL = 10000;         // ตรวจสอบสถานะทุก 10 วินาที
const long COUNTDOWN_TIME = 40 * 60 * 1000;  // 40 นาที
const long WARNING_TIME = 3 * 60 * 1000;     // 3 นาทีสุดท้าย
const long URGENT_TIME = 30 * 1000;          // 30 วินาทีสุดท้าย
const long DEBOUNCE_DELAY = 50;              // ดีเลย์ป้องกันการกระเด้ง
const long LONG_PRESS_TIME = 2500;           // เวลากดค้าง 2.5 วินาที

// JSON buffer size
const size_t JSON_DOC_SIZE = 512;

// Global objects
WiFiClient espClient;
PubSubClient mqtt(espClient);
AsyncWebServer server(80);

// Operating variables
unsigned long previousMillis = 0;
unsigned long lastMqttReconnectAttempt = 0;
const long MQTT_RECONNECT_INTERVAL = 5000;
bool ledState = LOW;
int connectionStatus = 0;
unsigned long relay1StartTime = 0;
unsigned long relay2StartTime = 0;
bool relay1Active = false;
bool relay2Active = false;
bool switch1LastState = HIGH;
bool switch2LastState = HIGH;
unsigned long lastDebounceTime1 = 0;
unsigned long lastDebounceTime2 = 0;
unsigned long switch1PressStart = 0;
unsigned long switch2PressStart = 0;
bool switch1LongPress = false;
bool switch2LongPress = false;

// Forward declarations
void publishStatus();
void activateRelay(int relay, bool state);
void resetTimer(int relay);
void updateLED(unsigned long currentMillis);
void handleRelay1(bool switchPressed);
void handleRelay2(bool switchPressed);
void setupWiFi();
void checkWiFiConnection();
void handleSwitch(bool reading, bool &lastState, bool &longPress, unsigned long &pressStart, 
                 unsigned long &lastDebounceTime, unsigned long currentMillis, int relayNum);

// WiFi setup and management
void setupWiFi() {
    WiFi.begin(ssid, password);
    
    Serial.print("Connecting to WiFi");
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 20) {
        delay(500);
        Serial.print(".");
        attempts++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\nWiFi connected");
        Serial.print("IP address: ");
        Serial.println(WiFi.localIP());
    } else {
        Serial.println("\nFailed to connect WiFi - Restarting");
        ESP.restart();
    }
}

void checkWiFiConnection() {
    static unsigned long lastWiFiCheck = 0;
    const unsigned long WIFI_CHECK_INTERVAL = 30000;  // 30 seconds
    
    if (millis() - lastWiFiCheck >= WIFI_CHECK_INTERVAL) {
        lastWiFiCheck = millis();
        
        if (WiFi.status() != WL_CONNECTED) {
            Serial.println("WiFi connection lost. Reconnecting...");
            WiFi.disconnect();
            setupWiFi();
        }
    }
}

// Web Server setup
void setupWebServer() {
    DefaultHeaders::Instance().addHeader("Access-Control-Allow-Origin", "*");
    DefaultHeaders::Instance().addHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
    DefaultHeaders::Instance().addHeader("Access-Control-Allow-Headers", "Content-Type");

    server.on("/api/status", HTTP_GET, [](AsyncWebServerRequest *request) {
        DynamicJsonDocument doc(JSON_DOC_SIZE);
        
        doc["device_id"] = device_id;
        doc["wifi_connected"] = (WiFi.status() == WL_CONNECTED);
        doc["wifi_rssi"] = WiFi.RSSI();
        
        JsonObject relay1 = doc.createNestedObject("relay1");
        relay1["active"] = relay1Active;
        if (relay1Active) {
            unsigned long remaining = (relay1StartTime + COUNTDOWN_TIME - millis()) / 1000;
            relay1["remaining_seconds"] = remaining;
        }
        
        JsonObject relay2 = doc.createNestedObject("relay2");
        relay2["active"] = relay2Active;
        if (relay2Active) {
            unsigned long remaining = (relay2StartTime + COUNTDOWN_TIME - millis()) / 1000;
            relay2["remaining_seconds"] = remaining;
        }

        String response;
        serializeJson(doc, response);
        request->send(200, "application/json", response);
    });

    server.on("/api/relay", HTTP_POST, [](AsyncWebServerRequest *request) {}, NULL,
        [](AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total) {
        
        DynamicJsonDocument doc(JSON_DOC_SIZE);
        DeserializationError error = deserializeJson(doc, data);
        
        if (error) {
            Serial.print("JSON Parse Error: ");
            Serial.println(error.c_str());
            request->send(400, "text/plain", "Invalid JSON");
            return;
        }
        
        if (!doc.containsKey("relay") || !doc.containsKey("action")) {
            request->send(400, "text/plain", "Missing required fields");
            return;
        }
        
        int relay = doc["relay"];
        const char* action = doc["action"];
        
        if (relay != 1 && relay != 2) {
            request->send(400, "text/plain", "Invalid relay number");
            return;
        }
        
        if (strcmp(action, "ON") == 0) {
            activateRelay(relay, true);
        }
        else if (strcmp(action, "OFF") == 0) {
            activateRelay(relay, false);
        }
        else if (strcmp(action, "RESET") == 0) {
            resetTimer(relay);
        }
        else {
            request->send(400, "text/plain", "Invalid action");
            return;
        }
        
        request->send(200);
    });

    server.begin();
}

// Function implementations
bool checkInternet() {
    HTTPClient http;
    http.begin("http://www.google.com");
    int httpCode = http.GET();
    http.end();
    return httpCode > 0;
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
    String message;
    for (int i = 0; i < length; i++) {
        message += (char)payload[i];
    }
    
    Serial.printf("MQTT Message [%s]: %s\n", topic, message.c_str());

    DynamicJsonDocument doc(JSON_DOC_SIZE);
    DeserializationError error = deserializeJson(doc, message);
    
    if (error) {
        Serial.print("Failed to parse JSON: ");
        Serial.println(error.c_str());
        return;
    }

    try {
        if (String(topic) == topic_command) {
            String command = doc["command"].as<String>();
            if (command == "status") {
                publishStatus();
            }
        }
        else if (String(topic) == topic_relay1_control || String(topic) == topic_relay2_control) {
            String action = doc["action"].as<String>();
            int relayNum = (String(topic) == topic_relay1_control) ? 1 : 2;
            
            if (action == "ON") {
                activateRelay(relayNum, true);
            } else if (action == "OFF") {
                activateRelay(relayNum, false);
            } else if (action == "RESET") {
                resetTimer(relayNum);
            } else {
                Serial.printf("Unknown action: %s\n", action.c_str());
            }
        }
    } catch (const std::exception& e) {
        Serial.printf("Error processing MQTT message: %s\n", e.what());
    }
}

void handleSwitch(bool reading, bool &lastState, bool &longPress, unsigned long &pressStart, 
                 unsigned long &lastDebounceTime, unsigned long currentMillis, int relayNum) {
                 
    if (reading != lastState) {
        lastDebounceTime = currentMillis;
    }

    if ((currentMillis - lastDebounceTime) > DEBOUNCE_DELAY) {
        // เมื่อกดปุ่ม (LOW)
        if (reading == LOW) {
            // เริ่มนับเวลากด
            if (pressStart == 0) {
                pressStart = currentMillis;
            }
            
            // ตรวจสอบการกดค้าง
            if (!longPress && (currentMillis - pressStart) >= LONG_PRESS_TIME) {
                longPress = true;
                if (relayNum == 1 && relay1Active) {
                    relay1Active = false;
                    digitalWrite(RELAY1_PIN, LOW);
                    Serial.println("Long press - Relay 1 forced OFF");
                    publishStatus();
                } else if (relayNum == 2 && relay2Active) {
                    relay2Active = false;
                    digitalWrite(RELAY2_PIN, LOW);
                    Serial.println("Long press - Relay 2 forced OFF");
                    publishStatus();
                }
            }
        }
        // เมื่อปล่อยปุ่ม (HIGH)
        else if (pressStart > 0) {  // ต้องมีการกดมาก่อน
            if (!longPress) {  // ถ้าไม่ใช่การกดค้าง
                if (relayNum == 1) {
                    handleRelay1(true);
                } else {
                    handleRelay2(true);
                }
            }
            // รีเซ็ตสถานะ
            pressStart = 0;
            longPress = false;
        }
    }
    
    lastState = reading;
}

void updateLED(unsigned long currentMillis) {
    bool isEmergencyWarning = false;
    bool isWarning = false;
    
    if (relay1Active) {
        unsigned long remaining1 = COUNTDOWN_TIME - (currentMillis - relay1StartTime);
        if (remaining1 <= URGENT_TIME) {
            isEmergencyWarning = true;
        } else if (remaining1 <= WARNING_TIME) {
            isWarning = true;
        }
    }
    
    if (relay2Active && !isEmergencyWarning) {
        unsigned long remaining2 = COUNTDOWN_TIME - (currentMillis - relay2StartTime);
        if (remaining2 <= URGENT_TIME) {
            isEmergencyWarning = true;
        } else if (remaining2 <= WARNING_TIME) {
            isWarning = true;
        }
    }
    
    if (isEmergencyWarning) {
        digitalWrite(LED_PIN, (currentMillis % EMERGENCY_BLINK < EMERGENCY_BLINK/2) ? HIGH : LOW);
    }
    else if (isWarning) {
        digitalWrite(LED_PIN, (currentMillis % WARNING_BLINK < WARNING_BLINK/2) ? HIGH : LOW);
    }
    else {
        switch (connectionStatus) {
            case 0:
                digitalWrite(LED_PIN, (currentMillis % WIFI_FAST_BLINK < WIFI_FAST_BLINK/2) ? HIGH : LOW);
                break;
            case 1:
                digitalWrite(LED_PIN, LOW);
                break;
            case 2:
                digitalWrite(LED_PIN, (currentMillis % WIFI_SLOW_BLINK < WIFI_SLOW_BLINK/2) ? HIGH : LOW);
                break;
            case 3:
                digitalWrite(LED_PIN, HIGH);
                break;
        }
    }
}

void activateRelay(int relay, bool state) {
    if (relay == 1) {
        if (state && !relay1Active) {
            relay1Active = true;
            relay1StartTime = millis();
            digitalWrite(RELAY1_PIN, HIGH);
            Serial.println("Relay 1 activated");
        } else if (!state) {
            relay1Active = false;
            digitalWrite(RELAY1_PIN, LOW);
            Serial.println("Relay 1 deactivated");
        }
    } else if (relay == 2) {
        if (state && !relay2Active) {
            relay2Active = true;
            relay2StartTime = millis();
            digitalWrite(RELAY2_PIN, HIGH);
            Serial.println("Relay 2 activated");
        } else if (!state) {
            relay2Active = false;
            digitalWrite(RELAY2_PIN, LOW);
            Serial.println("Relay 2 deactivated");
        }
    }
    publishStatus();
}

void resetTimer(int relay) {
    if (relay == 1 && relay1Active) {
        relay1StartTime = millis();
        Serial.println("Relay 1 timer reset");
    } else if (relay == 2 && relay2Active) {
        relay2StartTime = millis();
        Serial.println("Relay 2 timer reset");
    }
    publishStatus();
}

void handleRelay1(bool switchPressed) {
    if (switchPressed) {
        if (!relay1Active) {
            relay1Active = true;
            relay1StartTime = millis();
            digitalWrite(RELAY1_PIN, HIGH);
            Serial.println("Relay 1 activated - Timer started (40 minutes)");
        } else if (relay1Active && ((millis() - relay1StartTime) >= (COUNTDOWN_TIME - WARNING_TIME))) {
            relay1StartTime = millis();
            Serial.println("Relay 1 timer reset - New 40 minutes countdown started");
        }
        publishStatus();
    }
}

void handleRelay2(bool switchPressed) {
    if (switchPressed) {
        if (!relay2Active) {
            relay2Active = true;
            relay2StartTime = millis();
            digitalWrite(RELAY2_PIN, HIGH);
            Serial.println("Relay 2 activated - Timer started (40 minutes)");
        } else if (relay2Active && ((millis() - relay2StartTime) >= (COUNTDOWN_TIME - WARNING_TIME))) {
            relay2StartTime = millis();
            Serial.println("Relay 2 timer reset - New 40 minutes countdown started");
        }
        publishStatus();
    }
}

void publishStatus() {
    if (!mqtt.connected()) {
        if (!reconnectMQTT()) {
            Serial.println("Failed to reconnect MQTT");
            return;
        }
    }

    DynamicJsonDocument doc(JSON_DOC_SIZE);
    
    doc["device_id"] = device_id;
    doc["wifi_connected"] = (WiFi.status() == WL_CONNECTED);
    doc["wifi_rssi"] = WiFi.RSSI();
    
    JsonObject relay1 = doc.createNestedObject("relay1");
    relay1["active"] = relay1Active;
    if (relay1Active) {
        unsigned long remaining = (relay1StartTime + COUNTDOWN_TIME - millis()) / 1000;
        relay1["remaining_seconds"] = remaining;
    }
    
    JsonObject relay2 = doc.createNestedObject("relay2");
    relay2["active"] = relay2Active;
    if (relay2Active) {
        unsigned long remaining = (relay2StartTime + COUNTDOWN_TIME - millis()) / 1000;
        relay2["remaining_seconds"] = remaining;
    }

    char buffer[JSON_DOC_SIZE];
    serializeJson(doc, buffer);
    
    if (!mqtt.publish(topic_status, buffer, true)) {
        Serial.println("Failed to publish MQTT message");
    }
}

bool reconnectMQTT() {
    if (mqtt.connect(device_id, mqtt_user, mqtt_password)) {
        Serial.println("Connected to MQTT Broker");
        mqtt.subscribe(topic_relay1_control);
        mqtt.subscribe(topic_relay2_control);
        mqtt.subscribe(topic_command);
        publishStatus();
        return true;
    }
    return false;
}

void setup() {
    Serial.begin(115200);
    delay(1000);
    Serial.println("Starting setup...");
    
    pinMode(LED_PIN, OUTPUT);
    pinMode(RELAY1_PIN, OUTPUT);
    pinMode(RELAY2_PIN, OUTPUT);
    pinMode(SWITCH1_PIN, INPUT_PULLUP);
    pinMode(SWITCH2_PIN, INPUT_PULLUP);
    
    digitalWrite(RELAY1_PIN, LOW);
    digitalWrite(RELAY2_PIN, LOW);
    digitalWrite(LED_PIN, LOW);
    
    mqtt.setServer(mqtt_server, mqtt_port);
    mqtt.setCallback(mqttCallback);
    
    setupWiFi();
    setupWebServer();
    
    Serial.println("Setup complete.");
}

void loop() {
    unsigned long currentMillis = millis();
    
    checkWiFiConnection();
    
    // MQTT Connection management
    if (!mqtt.connected()) {
        if (currentMillis - lastMqttReconnectAttempt >= MQTT_RECONNECT_INTERVAL) {
            lastMqttReconnectAttempt = currentMillis;
            if (reconnectMQTT()) {
                lastMqttReconnectAttempt = 0;
            }
        }
    } else {
        mqtt.loop();
    }

    // จัดการสวิตช์
    bool switch1Reading = digitalRead(SWITCH1_PIN);
    bool switch2Reading = digitalRead(SWITCH2_PIN);
    
    handleSwitch(switch1Reading, switch1LastState, switch1LongPress, switch1PressStart,
                lastDebounceTime1, currentMillis, 1);
                
    handleSwitch(switch2Reading, switch2LastState, switch2LongPress, switch2PressStart,
                lastDebounceTime2, currentMillis, 2);

    // ตรวจสอบการทำงานของรีเลย์
    if (relay1Active && (currentMillis - relay1StartTime >= COUNTDOWN_TIME)) {
        relay1Active = false;
        digitalWrite(RELAY1_PIN, LOW);
        Serial.println("Relay 1 timer completed - turned OFF");
        publishStatus();
    }
    
    if (relay2Active && (currentMillis - relay2StartTime >= COUNTDOWN_TIME)) {
        relay2Active = false;
        digitalWrite(RELAY2_PIN, LOW);
        Serial.println("Relay 2 timer completed - turned OFF");
        publishStatus();
    }
    
    // อัพเดทสถานะ LED
    updateLED(currentMillis);
    
    // อัพเดทสถานะทั่วไป
    if (currentMillis - previousMillis >= CHECK_INTERVAL) {
        previousMillis = currentMillis;
        
        if (WiFi.status() != WL_CONNECTED) {
            connectionStatus = 0;
        } else {
            connectionStatus = checkInternet() ? 2 : 1;
        }
        
        publishStatus();
    }
}
